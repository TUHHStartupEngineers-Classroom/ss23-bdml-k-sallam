[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "Hello,\nAll of my code challenge attempts should now be under their respective chapter, under the “Journal” tab.\nKindly let me know if I need to modify the format any further.\nBest regards, Khaled"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes\nJust trying this out"
  },
  {
    "objectID": "02_ml_sup.html",
    "href": "02_ml_sup.html",
    "title": "02 Supervised ML - Regression",
    "section": "",
    "text": "#Which Bike Categories are in high demand? #Which Bike Categories are under represented?\nGoal\n#Use a pricing algorithm to determine a new product price in a category gap"
  },
  {
    "objectID": "02_ml_sup.html#step-1---re-organize-the-data-set.",
    "href": "02_ml_sup.html#step-1---re-organize-the-data-set.",
    "title": "02 Supervised ML - Regression",
    "section": "Step 1 - re-organize the data set.",
    "text": "Step 1 - re-organize the data set.\n\n#Define the category which shall be analyzed\ncategory <- \"category_2\"\npredictors_filter = 7\n\n\n# Apply your data transformation skills!\nbike_features_tbl_r <- bike_features_tbl %>% \n                       select(price, model:weight , category,`Rear Derailleur`, `Saddle`, `Shift Lever`) %>%\n                       mutate_all(funs(replace(., .==\"\", \"N/A\"))) %>%\n                       mutate(id = row_number())%>%\n                       mutate(id_1 = row_number())%>%\n                       mutate(id_2 = row_number())%>%\n                       mutate(id_3 = row_number())%>%\n                       pivot_wider(names_from = `Saddle`, values_from =id_3, names_repair = \"unique\") %>%\n                       pivot_wider(names_from = `Shift Lever`, values_from =id_2, names_repair = \"unique\") %>%\n                       pivot_wider(names_from = `Rear Derailleur`, values_from =id_1, names_repair = \"unique\") %>%\n                       select(-`N/A...59`, -`N/A...60`, -`N/A...133` ) %>%\n                       mutate_all(funs(replace_na(.,0)))\n\nbike_features_tbl_r$price <- as.integer(bike_features_tbl_r$price)\nbike_features_tbl_r$weight <- as.double(bike_features_tbl_r$weight)\n\nbike_features_tbl_r_t <-bike_features_tbl_r %>%\n                       select(-(price:id)) %>% \n                       mutate_all(funs(replace(.,.>1,1))) %>%\n                       mutate_if(is.character,as.numeric) %>%\n                       add_column(test_col = \"Don't care\", .before = TRUE) %>%\n                       adorn_totals(where =\"row\",name = \"Total\") %>%\n                       select(-test_col)  \n\n\nff = data.frame(dummy =1:231)\nfor(i in 1:ncol(bike_features_tbl_r_t)) {       # for-loop over columns\n\n  if (bike_features_tbl_r_t[232,i] >= predictors_filter)\n  {\n    ff <- ff%>% add_column(bike_features_tbl_r_t[1:231,i],.after = TRUE)  \n  }\n}\n\nbike_features_tbl_r_t <- ff %>% select(-dummy)\n\nbike_features_tbl_r_tt <- bike_features_tbl_r_t  %>% add_column(.data = bike_features_tbl_r %>% \n                                                                  select(price:id))\nbike_features_tbl_r_tt\n# Output: bike_features_tbl_r_tt"
  },
  {
    "objectID": "02_ml_sup.html#step-2---training-test-sets",
    "href": "02_ml_sup.html#step-2---training-test-sets",
    "title": "02 Supervised ML - Regression",
    "section": "Step 2 - TRAINING & TEST SETS",
    "text": "Step 2 - TRAINING & TEST SETS\n\nprop: split the data according to a given percentage to train-test sets\nstrata: consider different categories when dividing the data set\n\n\n# Fix the random numbers by setting the seed \n# This enables the analysis to be reproducible when random numbers are used \nset.seed(seed = 1113)\n# Put 3/4 of the data into the training set \nsplit_obj <- rsample::initial_split(bike_features_tbl_r_tt, prop   = 0.75, \n                                    strata = \"category_2\")\n# Create data frames for the two sets:\ntrain_data <- training(split_obj) \ntest_data  <- testing(split_obj)"
  },
  {
    "objectID": "02_ml_sup.html#step-3---prepare-model-recipe",
    "href": "02_ml_sup.html#step-3---prepare-model-recipe",
    "title": "02 Supervised ML - Regression",
    "section": "Step 3 - Prepare model recipe",
    "text": "Step 3 - Prepare model recipe\n\nbikes_data_set <- \n                  recipe(price ~ ., data = train_data) %>% \n                  step_rm(model_year, weight) %>%\n                  update_role(model, category_2, id, new_role = \"ID\")%>%\n                  step_dummy(all_nominal(), -all_outcomes()) %>%\n                  prep()\n\nbikes_data_set\n# Output: bikes_data_set"
  },
  {
    "objectID": "02_ml_sup.html#step-4---bake-data-sets-according-to-the-recipe",
    "href": "02_ml_sup.html#step-4---bake-data-sets-according-to-the-recipe",
    "title": "02 Supervised ML - Regression",
    "section": "Step 4 - Bake data sets according to the recipe",
    "text": "Step 4 - Bake data sets according to the recipe\n\ntrain_transformed_tbl <- bake(bikes_data_set, train_data)\ntest_transformed_tbl  <- bake(bikes_data_set, test_data)\n\ntrain_transformed_tbl\n\n\ntest_transformed_tbl"
  },
  {
    "objectID": "02_ml_sup.html#step-5---select-model-and-engine-to-analyze-the-data",
    "href": "02_ml_sup.html#step-5---select-model-and-engine-to-analyze-the-data",
    "title": "02 Supervised ML - Regression",
    "section": "Step 5 - Select model and engine to analyze the data",
    "text": "Step 5 - Select model and engine to analyze the data\n\nlr_mod_b <- linear_reg(mode = \"regression\") %>%  set_engine(\"lm\") \n\nlr_mod_b"
  },
  {
    "objectID": "02_ml_sup.html#step-6---select-work-flow",
    "href": "02_ml_sup.html#step-6---select-work-flow",
    "title": "02 Supervised ML - Regression",
    "section": "Step 6 - Select work flow",
    "text": "Step 6 - Select work flow\n\nbikes_workflow <- \n  workflow() %>% \n  add_model(lr_mod_b) %>% \n  add_recipe(bikes_data_set)\n\nbikes_workflow"
  },
  {
    "objectID": "02_ml_sup.html#step-7---fit-the-model-to-determine-models-governing-equation",
    "href": "02_ml_sup.html#step-7---fit-the-model-to-determine-models-governing-equation",
    "title": "02 Supervised ML - Regression",
    "section": "Step 7 - Fit the model, to determine model’s governing equation",
    "text": "Step 7 - Fit the model, to determine model’s governing equation\n\n# Use purrr to map\nbikes_fit <- \n  bikes_workflow %>% \n  fit(data = train_data)\n\nbikes_fit\n# Output: bikes_fit \n\n\n# Plot the given model\n\n  bikes_fit %>% pull_workflow_fit() %>% \n  tidy() %>%\n  arrange(p.value) %>% \n\n mutate(term = as_factor(term) %>% fct_rev()) %>%\n  \n  ggplot(aes(x = estimate, y = term)) +\n  geom_point(color = \"#2dc6d6\", size = 3) +\n  ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1, suffix = \" €\", prefix = \"\")),\n                            size = 4, fill = \"#272A36\", color = \"white\") +\n  scale_x_continuous(labels = scales::dollar_format(suffix = \" €\", prefix = \"\")) +\n  labs(title = \"Linear Regression: Feature Importance\",\n       subtitle = \"Model 01: Simple lm Model\")"
  },
  {
    "objectID": "02_ml_sup.html#step-8---prepare-for-model-prediction",
    "href": "02_ml_sup.html#step-8---prepare-for-model-prediction",
    "title": "02 Supervised ML - Regression",
    "section": "Step 8 - Prepare for model prediction",
    "text": "Step 8 - Prepare for model prediction\n\n# Generalized into a function\ncalc_metrics <- function(model, new_data = test_tbl) {\n  \n  model %>%\n    predict(new_data = new_data) %>%\n    \n    bind_cols(new_data %>% select(price)) %>%\n    yardstick::metrics(truth = price, estimate = .pred)\n  \n}"
  },
  {
    "objectID": "02_ml_sup.html#step-9---evaluate-the-predicted-resutls",
    "href": "02_ml_sup.html#step-9---evaluate-the-predicted-resutls",
    "title": "02 Supervised ML - Regression",
    "section": "Step 9 - Evaluate the predicted resutls",
    "text": "Step 9 - Evaluate the predicted resutls\n\nbikes_fit %>% calc_metrics(train_data)"
  },
  {
    "objectID": "02_ml_sup.html#test-with-model-glmnet-with-the-same-steps",
    "href": "02_ml_sup.html#test-with-model-glmnet-with-the-same-steps",
    "title": "02 Supervised ML - Regression",
    "section": "Test with model: glmnet , with the same steps!",
    "text": "Test with model: glmnet , with the same steps!\n\n#init model:\nset.seed(1234)\n\nlm_model_glment <-linear_reg(mode    = \"regression\", \n                                     penalty = 10, \n                                     mixture = 0.1) %>%\n    set_engine(\"glmnet\")\nlm_model_glment\n\n\nbikes_workflow_glment <- \n  workflow() %>% \n  add_model(lm_model_glment) %>% \n  add_recipe(bikes_data_set)\n\nbikes_workflow_glment\n\n\nbikes_fit_glment <- \n  bikes_workflow_glment %>% \n  fit(data = train_data)\n\nbikes_fit_glment\n\nbikes_fit_glment %>% calc_metrics(train_data)"
  },
  {
    "objectID": "01_ml_fund.html",
    "href": "01_ml_fund.html",
    "title": "01 Machine Learning Fundamentals",
    "section": "",
    "text": "Load the following libraries.\n\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\nlibrary(magrittr) \nlibrary(dplyr)    \nlibrary(ggplot2)"
  },
  {
    "objectID": "01_ml_fund.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "01_ml_fund.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\nsp_500_daily_returns_tbl <- select(sp_500_prices_tbl, symbol, date, adjusted)%>%\n  filter(date >= as.Date(\"2018-01-01\"))%>%\n  group_by(symbol)%>%\n  mutate(lag = lag(adjusted))%>%\n  na.exclude()%>%\n  mutate(diff = adjusted - lag)%>%\n  mutate(pct_return = diff / lag)%>%\n  select(symbol, date, pct_return)%>%\n  ungroup()\n\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows"
  },
  {
    "objectID": "01_ml_fund.html#step-2---convert-to-user-item-format",
    "href": "01_ml_fund.html#step-2---convert-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl%>%\n  spread(date, pct_return, fill = 0)%>%\n  ungroup()\n\nstock_date_matrix_tbl\n\n# A tibble: 502 × 283\n   symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n   <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n 1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n 2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n 3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n 4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n 5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n 6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n 7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n 8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n 9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n# ℹ 492 more rows\n# ℹ 277 more variables: `2018-01-10` <dbl>, `2018-01-11` <dbl>,\n#   `2018-01-12` <dbl>, `2018-01-16` <dbl>, `2018-01-17` <dbl>,\n#   `2018-01-18` <dbl>, `2018-01-19` <dbl>, `2018-01-22` <dbl>,\n#   `2018-01-23` <dbl>, `2018-01-24` <dbl>, `2018-01-25` <dbl>,\n#   `2018-01-26` <dbl>, `2018-01-29` <dbl>, `2018-01-30` <dbl>,\n#   `2018-01-31` <dbl>, `2018-02-01` <dbl>, `2018-02-02` <dbl>, …\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "01_ml_fund.html#step-3---perform-k-means-clustering",
    "href": "01_ml_fund.html#step-3---perform-k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"raw_data/stock_date_matrix_tbl.rds\")\n\n\nsp_500_daily_returns_tbl <- read_rds(\"Data/Data/sp_500_prices_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 1,225,765 × 8\n   symbol date        open  high   low close   volume adjusted\n   <chr>  <date>     <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl>\n 1 MSFT   2009-01-02  19.5  20.4  19.4  20.3 50084000     15.9\n 2 MSFT   2009-01-05  20.2  20.7  20.1  20.5 61475200     16.0\n 3 MSFT   2009-01-06  20.8  21    20.6  20.8 58083400     16.2\n 4 MSFT   2009-01-07  20.2  20.3  19.5  19.5 72709900     15.2\n 5 MSFT   2009-01-08  19.6  20.2  19.5  20.1 70255400     15.7\n 6 MSFT   2009-01-09  20.2  20.3  19.4  19.5 49815300     15.2\n 7 MSFT   2009-01-12  19.7  19.8  19.3  19.5 52163500     15.2\n 8 MSFT   2009-01-13  19.5  20.0  19.5  19.8 65843500     15.5\n 9 MSFT   2009-01-14  19.5  19.7  19.0  19.1 80257500     14.9\n10 MSFT   2009-01-15  19.1  19.3  18.5  19.2 96169800     15.0\n# ℹ 1,225,755 more rows\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl%>%\n  subset(select = -c(symbol))%>%\n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)\n\n# A tibble: 1 × 4\n  totss tot.withinss betweenss  iter\n  <dbl>        <dbl>     <dbl> <int>\n1  33.6         29.2      4.40     4"
  },
  {
    "objectID": "01_ml_fund.html#step-4---find-the-optimal-value-of-k",
    "href": "01_ml_fund.html#step-4---find-the-optimal-value-of-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nkmeans_mapped_tbl <- tibble(centers = 1:30)%>%\n  mutate(k_means = centers %>% map(kmeans_mapper))%>%\n  mutate(glance  = k_means %>% map(glance))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `k_means = centers %>% map(kmeans_mapper)`.\nCaused by warning:\n! did not converge in 10 iterations\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nkmeans_mapped_tbl %>%\n  unnest(glance)%>%\n  select(centers, tot.withinss)%>%\n  \n  # visualization\n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#2DC6D6\", size = 4) +\n  geom_line(color = \"#2DC6D6\", size = 1) +\n    \n  # Add labels (which are repelled a little)\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n      \n  # Formatting\n  labs(title = \"Scree Plot\",\n  subtitle = \"\",\n  caption = \"Conclusion: Based on the Scree Plot, we select 3 clusters to segment the company base.\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "01_ml_fund.html#step-5---apply-umap",
    "href": "01_ml_fund.html#step-5---apply-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"raw_data/k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\numap_results <- stock_date_matrix_tbl%>%\n  select(-symbol)%>%\n  umap()\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout%>%\n  as_tibble(.name_repair = \"unique\")%>%\n  set_names(c(\"x\", \"y\"))%>%\n    bind_cols(\n        stock_date_matrix_tbl %>% select(symbol)\n    )\n\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\numap_results_tbl %>%\n    ggplot(aes(x, y)) +\n    geom_point(alpha = 0.5) + \n    labs(title = \"UMAP Projection\") +\n    theme_tq()\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "01_ml_fund.html#step-6---combine-k-means-and-umap",
    "href": "01_ml_fund.html#step-6---combine-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"raw_data/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"raw_data/umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\nk_means_obj <- kmeans_mapped_tbl %>%\n    pull(k_means) %>%\n    pluck(3)\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n  # Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_clusters_tbl <- k_means_obj %>% \n    augment(stock_date_matrix_tbl) %>%\n    select(symbol, .cluster)\n    \n  umap_kmeans_results_tbl <- umap_results_tbl %>%\n    left_join(umap_kmeans_clusters_tbl, by = \"symbol\")%>%\n    left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\n umap_kmeans_results_tbl \n\n# A tibble: 502 × 6\n        V1      V2 symbol .cluster company                       sector         \n     <dbl>   <dbl> <chr>  <fct>    <chr>                         <chr>          \n 1 -0.764   1.65   A      1        Agilent Technologies Inc.     Health Care    \n 2 -2.70    0.455  AAL    3        American Airlines Group Inc.  Industrials    \n 3  0.739  -0.0320 AAP    1        Advance Auto Parts Inc.       Consumer Discr…\n 4  0.0130  3.09   AAPL   3        Apple Inc.                    Information Te…\n 5 -0.965  -0.0193 ABBV   1        AbbVie Inc.                   Health Care    \n 6 -0.506  -0.659  ABC    1        AmerisourceBergen Corporation Health Care    \n 7  0.436   3.10   ABMD   3        ABIOMED Inc.                  Health Care    \n 8 -0.262   1.35   ABT    1        Abbott Laboratories           Health Care    \n 9  0.0598  1.63   ACN    1        Accenture Plc Class A         Information Te…\n10  0.570   3.43   ADBE   3        Adobe Inc.                    Information Te…\n# ℹ 492 more rows\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %>%\n    ggplot(aes(V1, V2, color = .cluster)) +\n    geom_point(alpha = 0.5)\n\n\n\n\n\n\n\numap_kmeans_results_tbl\n\n# A tibble: 502 × 6\n        V1      V2 symbol .cluster company                       sector         \n     <dbl>   <dbl> <chr>  <fct>    <chr>                         <chr>          \n 1 -0.764   1.65   A      1        Agilent Technologies Inc.     Health Care    \n 2 -2.70    0.455  AAL    3        American Airlines Group Inc.  Industrials    \n 3  0.739  -0.0320 AAP    1        Advance Auto Parts Inc.       Consumer Discr…\n 4  0.0130  3.09   AAPL   3        Apple Inc.                    Information Te…\n 5 -0.965  -0.0193 ABBV   1        AbbVie Inc.                   Health Care    \n 6 -0.506  -0.659  ABC    1        AmerisourceBergen Corporation Health Care    \n 7  0.436   3.10   ABMD   3        ABIOMED Inc.                  Health Care    \n 8 -0.262   1.35   ABT    1        Abbott Laboratories           Health Care    \n 9  0.0598  1.63   ACN    1        Accenture Plc Class A         Information Te…\n10  0.570   3.43   ADBE   3        Adobe Inc.                    Information Te…\n# ℹ 492 more rows"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  }
]